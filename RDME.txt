r1 =0, r2 = 0

add r1,1,r2      r1 = 0 r2 = 1
add r2,r2,r2     r1 = 0 r2 = 2
add r2,r2,r2     r1 = 0 r2 = 4
add r1,1,r1      r1 = 1 r2 = 4
sub r2,r1,r2     r1 = 1 r2 = 3
stop


add r1,4,r2
add r2,1,r2
add r1,1,r1
stop


load r1,0,r1
load r2,0,r2
add r2,r2,r2
add r2,r2,r2     
add r1,1,r1      
sub r2,r1,r2 
store r2,0,r2  
stop

add r0,1,r3
L_loop: sle r2,1,r4
seq r4,r0,r4
braz r4,L_end
mul r3,r2,r3
sub r2,1,r2
jmp L_loop,r0

Factorielle itérative : 
r2 : n
r3 : endroit où valeurs stockées.

load r0,2,r2
add r0,1,r3
L_loop: sle r2,1,r4
seq r4,r0,r4
braz r4,L_end
mult r3,r2,r3
sub r2,1,r2
jmp L_loop,r0
L_end: stop

2e poss, utilisateur donne valeur : 

scall 0
add r1,0,r2
add r0,1,r3
L_loop: sle r2,1,r4
seq r4,r0,r4
braz r4,L_end
mult r3,r2,r3
sub r2,1,r2
jmp L_loop,r0
L_end: stop

Multiplication de matrices : 
[fonctionnel pour des matrices de toutes tailles (tant que celles-ci respectent
les règles de la multiplication matricielle)]
[pas encore de système de vérification implémenté pour vérifier ça]

load r0,1,r1
load r0,3,r8
mult r8,r1,r8
add r8,3,r8
L_i: seq r1,0,r4
branz r4,L_end
sub r1,1,r1
load r0,2,r2
L_j: seq r2,0,r4
branz r4,L_i
add r0,0,r5
load r0,3,r3
load r0,2,r4
mult r4,r3,r4
add r4,r8,r4
load r0,1,r9
mult r9,r1,r9
add r9,r2,r9
add r9,r4,r9
sub r3,1,r3
L_k: slt r3,0,r4
branz r4,L_k_1
load r0,3,r4
mult r4,r1,r4
add r4,r3,r4
add r4,4,r4
load r4,0,r6
load r0,3,r4
mult r4,r3,r4
add r4,r2,r4
add r4,r8,r4
load r4,0,r7
mult r6,r7,r6
add r5,r6,r5
sub r3,1,r3
jmp L_k,r0
L_end: stop
L_k_1: store r9,0,r5
sub r2,1,r2
jmp L_j,r0